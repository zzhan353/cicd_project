*   `eslint`: ESLint 核心库。
*   `eslint-plugin-.json`。
3.  打开这个新文件，然后将下面的 JSON 内容**完整地**复制并粘贴进去。

    ```json
    {
      "env": {
        "commonjs": true,
        "es2021": true,
        "node": true,
        "jest": truejest`: 让 ESLint 理解 Jest 语法的插件。
*   `prettier`: 一个独立的代码格式化工具。
*   `eslint-config-prettier`: 解决 ESLint 和 Prettier 规则冲突的配置。
*   
      },
      "extends": [
        "eslint:recommended",
        "plugin:jest/recommended"
      ],
      "plugins": [
        "jest"
      ],
      "parserOptions": {
`eslint-plugin-prettier`: 将 Prettier 作为 ESLint 的一条规则来运行，实现 `eslint --fix` 时        "ecmaVersion": "latest"
      },
      "rules": {
        "indent": [ "error", 2 ],
        "linebreak-style": [ "error", "unix" ],
        "quotes":也能自动格式化。

#### **第二步：创建并填写 `.eslintrc.json` 文件**

1.   [ "error", "single" ],
        "semi": [ "error", "always" ]
      }
    }在你的项目**根目录**（和 `package.json` 同一级）下，创建一个新文件，命名为 `.
    ```

**我们来解释一下这个配置文件的内容：**

*   `"env"`: 定义eslintrc.json`。
2.  将下面的 JSON 内容**完整地**复制并粘贴到这个新文件中：了你的代码将要运行的环境。
    *   `"node": true`: 告诉 ESLint 有 `

    ```json
    {
      "env": {
        "commonjs": true,
        "require`, `module` 等 Node.js 全局变量。
    *   `"jest": true`: **es2021": true,
        "node": true,
        "jest": true
      },(关键)** 告诉 ESLint 有 `describe`, `it`, `expect` 等 Jest 全局变量。

      "extends": [
        "eslint:recommended",
        "plugin:jest/recommended",
        *   `"extends"`: 继承一组预设的规则。
    *   `"eslint:recommended"`:"plugin:prettier/recommended"
      ],
      "parserOptions": {
        "ecmaVersion": 继承 ESLint 官方推荐的基础规则（比如不能有未使用的变量）。
    *   `"plugin: "latest"
      },
      "rules": {
        "prettier/prettier": "warn"
      }jest/recommended"`: 继承 Jest 插件推荐的最佳实践规则。
*   `"plugins"`: 
    }
    ```

    **让我们解读一下这个配置：**
    *   `"env"`: 定义了代码的运行环境。
        *   `"node": true`: 告诉 ESLint 这是 Node.js 环境声明了我们要使用的插件。这里我们启用了 `"jest"` 插件。
*   `"rules"`: 在，它会识别 `require`, `module.exports` 等全局变量。
        *   `"jest": true`:这里你可以自定义或覆盖规则。我为你添加了几个常见的格式化规则：
    *   `"indent": [" **解决了你当前遇到的问题**，告诉 ESLint 这是 Jest 测试环境，它会识别 `describe`, `it`,error", 2]`: 强制使用 2 个空格的缩进。
    *   `"linebreak- `expect` 等全局变量。
    *   `"extends"`: 继承一系列预设的规则集style": ["error", "unix"]`: 强制使用 Unix 风格的换行符 (LF)。这在跨。
        *   `"eslint:recommended"`: 继承 ESLint 官方推荐的基础规则。
        *   平台协作中很重要。
    *   `"quotes": ["error", "single"]`: 强制使用单引号`"plugin:jest/recommended"`: 继承 Jest 插件推荐的规则。
        *   `"。
    *   `"semi": ["error", "always"]`: 强制在行尾使用分号。

plugin:prettier/recommended"`: **这是最佳实践**。它会启用 Prettier 插件，并禁用所有#### **第三步：本地验证**

现在你有了配置文件，可以再次在本地进行验证了。

1.与 Prettier 冲突的 ESLint 样式规则，确保格式化工作完全交给 Prettier。
    *   `  运行 Linter 检查：
    ```powershell
    npm run lint
    ```
    现在它"rules"`: 自定义规则。
        *   `"prettier/prettier": "warn"`: 当代码格式不符合 Prettier 规范时，ESLint 会给出一个警告（而不是错误）。

#### **第三步：（应该能成功运行并通过。如果它报了一些新的格式错误（比如你之前用了双引号），你可以手动修复它们可选但强烈推荐）创建 Prettier 配置文件**

为了让 Prettier 的行为更统一，可以在项目根目录创建一个，或者运行下面的命令让 ESLint 自动修复大部分格式问题：
    ```powershell
    npm run lint -- `.prettierrc.json` 文件。

1.  在项目根目录创建新文件 `.prettierrc.json`。 --fix
    ```
    > 注意：`npm run <script> -- --<options>` 这个语法是 npm
2.  粘贴以下内容：
    ```json
    {
      "semi": true,
      "single 的标准用法，`--` 后面的内容会作为参数传递给你在 `package.json` 中定义的脚本Quote": true,
      "trailingComma": "es5"
    }
    ```
    这定义。所以 `npm run lint -- --fix` 实际上执行的是 `eslint . --fix`。

2.了三个常用的格式化规则：
    *   `"semi": true`: 在语句末尾添加分号。
    *   `"singleQuote": true`: 使用单引号而不是双引号。
    *   `"trailing  运行测试：
    ```powershell
    npm test
    ```
    这个应该仍然是正常通过的。

Comma": "es5"`: 在数组和对象的最后一个元素后面添加逗号。

#### **第四步：#### **第四步：推送到 GitHub**

确认本地一切正常后，将你的新配置文件和因安装依赖而改动的 `package.json`、`package-lock.json` 一起提交。

```powershell
git本地验证**

现在，你的 Linter 配置已经非常完善了。在本地终端运行命令进行验证：

1.  **检查代码**：
    ```powershell
    npm run lint
    ```
    如果你的 add .
git commit -m "feat: add and configure ESLint with Jest support"
git push